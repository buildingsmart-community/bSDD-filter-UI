import{u as p,aL as w,aI as u,r as f,h as o,i as g,aM as i,m as S,aN as B,aO as C,k as v}from"./mergeIfcEntities-cfc280f2.js";const O=()=>{const e=p(),b=w(u);return f.useEffect(()=>{let s,a;const h=async()=>{try{if(await window.CefSharp?.BindObjectAsync("bsddBridge"),window.bsddBridge){window.updateSelection=async t=>{e(i(t)),console.log("CefSharp updateSelection:",t)},window.updateSettings=async t=>{e(o(t)),console.log("CefSharp updateSettings:",t)};const d=await window.bsddBridge.loadBridgeData();console.log("CefSharp loadBridgeData.");const l=JSON.parse(d);console.log("CefSharp bsddBridgeData:",l);const{ifcData:r,settings:n,propertyIsInstanceMap:c}=l;if(n&&(await e(o(n)),console.log("CefSharp settings:",n)),r?.length>0){const t=B(r);console.log("CefSharp mergedIfcEntity:",t),await e(i(r)),t&&e(C(t)),console.log("CefSharp initial merged IFC entity:",t)}c&&(e(v(c)),console.log("CefSharp propertyIsInstanceMap:",c)),console.log("CefSharp connection and global functions are set up successfully.")}else console.error("Failed to bind the bsddBridge object."),await e(o(g))}catch(d){console.error("Error setting up CefSharp connection:",d)}};return s=setInterval(()=>{window.CefSharp?(clearInterval(s),clearTimeout(a),h()):console.log("Waiting for CefSharp to be available...")},100),a=setTimeout(()=>{clearInterval(s),console.log("CefSharp not available, loading default settings."),e(o(g)),e(i(S?.ifcData||[]))},1e3),()=>{clearInterval(s),clearTimeout(a)}},[e]),f.useEffect(()=>{e(i(S?.ifcData||[]))},[e,b]),{bsddSearch:s=>{const a=JSON.stringify(s);window?.bsddBridge?.bsddSearch?(console.log("CefSharp bsddSearch:",a),window.bsddBridge.bsddSearch(a)):console.error("bsddBridge or bsddSearch method is not available.")},bsddSelect:s=>{const a=JSON.stringify(s);window?.bsddBridge?.bsddSelect?(console.log("CefSharp bsddSelect:",a),window.bsddBridge.bsddSelect(a)):console.error("bsddBridge or bsddSelect method is not available.")},bsddSearchSave:s=>{const a=JSON.stringify(s);return console.log("bsddBridge save:",a),window?.bsddBridge?.save?window.bsddBridge.save(a):(console.error("bsddBridge or save method is not available."),Promise.resolve("error"))},bsddSearchCancel:()=>{window?.bsddBridge?.cancel?window.bsddBridge.cancel():console.error("bsddBridge or cancel method is not available.")}}};export{O as u};
